
### ## 쉘 표준 입출력(Standard I/O) 설명서

#### **개념: 표준 입력 (stdin)**
* **목적:** 명령어가 사용자로부터 데이터를 입력받는 기본 통로입니다.
* **문법:** 일반적으로 키보드 입력을 의미합니다.
* **핵심 원리:** 다른 파일이나 명령어의 출력을 이 통로로 연결하여(재지정) 데이터를 전달할 수 있습니다.
* **사용 예시:** `read` 명령어는 사용자의 키보드 입력을 기다립니다.
* **AI의 사고 과정:** "이 명령어는 실행을 위해 추가적인 데이터 입력이 필요하군. 파일이나 다른 명령어의 결과를 `stdin`으로 넘겨줘야겠다."

#### **개념: 표준 출력 (stdout)**
* **목적:** 명령어가 성공적으로 실행된 후, 그 결과를 출력하는 기본 통로입니다.
* **문법:** 일반적으로 터미널 화면을 의미합니다.
* **핵심 원리:** 이 통로를 다른 파일이나 명령어의 입력으로 연결하여 결과를 전달하거나 저장할 수 있습니다.
* **사용 예시:** `ls -l` 명령어는 파일 목록을 터미널 화면에 출력합니다.
* **AI의 사고 과정:** "이 명령어의 결과는 중요하니, `stdout`을 파일로 저장하거나 다음 명령어의 `stdin`으로 전달하여 활용해야겠다."

#### **개념: 표준 에러 (stderr)**
* **목적:** 명령어가 실행 중 오류를 출력하는 통로입니다.
* **문법:** 일반적으로 터미널 화면을 의미하며, 표준 출력과는 분리된 통로입니다.
* **핵심 원리:** 오류 메시지만 따로 파일에 저장하거나, 정상 출력과 합쳐서 관리할 수 있습니다.
* **사용 예시:** `cat non_existent_file.txt`는 "No such file or directory" 메시지를 `stderr`로 출력합니다.
* **AI의 사고 과정:** "명령어 실행에 실패했군. `stderr`의 오류 메시지를 분석해서 실패 원인을 파악해야겠다."

---
### ## 쉘 메타문자(특수기호) 설명서
#### **개념: 출력 재지정 (Output Redirection, `>`)**
* **목적:** 명령어의 **표준 출력(stdout)**을 터미널 화면 대신 파일에 저장합니다.
* **문법:** `command > filename.txt`
* **핵심 원리:** `filename.txt` 파일이 이미 존재하면 내용을 덮어쓰고, 없으면 새로 생성하여 결과를 저장합니다.
* **사용 예시:** `ls -al > file_list.txt`
* **AI의 사고 과정:** "이 명령어의 실행 결과는 나중에 다시 분석해야 하니, 파일로 저장해둬야겠다. `>`를 사용해서 `stdout`을 파일에 기록해야지."

#### **개념: 입력 재지정 (Input Redirection, `<`)**
* **목적:** 파일의 내용을 명령어의 **표준 입력(stdin)**으로 사용합니다.
* **문법:** `command < filename.txt`
* **핵심 원리:** 키보드로 입력해야 할 내용을 `filename.txt` 파일이 대신 입력해주는 효과를 가집니다.
* **사용 예시:** `sort < unsorted_list.txt`
* **AI의 사고 과정:** "이 명령어는 여러 줄의 입력이 필요한데, 그 내용이 파일에 정리되어 있군. `<`를 사용해서 파일 내용을 통째로 명령어의 입력으로 전달해야겠다."